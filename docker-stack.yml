version: '3.9'

configs:
  ecommerce_app_env:
    file: ./.env

services:
  mysql-db:
    image: dexlo/mysql
    container_name: mysql-db-container
    environment:
      MYSQL_ROOT_PASSWORD: mypass
      MYSQL_DATABASE: ecommerce_app_database
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: mypass
    volumes:
      - ./mysql-db/user.sql:/docker-entrypoint-initdb.d/user.sql
    ports:
      - 3306:3306
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /etc/mysql/conf.d/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  redis-cache:
    image: dexlo/redis
    container_name: redis-cache-container
    command: redis-server --requirepass mypass
    ports:
      - 6379:6379
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /usr/local/etc/redis/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  authentication-service:
    image: dexlo/authentication1
    container_name: authentication-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
    environment:
      - DB_HOST=mysql-db
      - DB_PORT=3306
      - DB_USER=mysqluser
      - DB_PASS=mypass
      - DB_SCHEMA=ecommerce_app_database
      - ACTIVE_PROFILE=dev
      - PORT=7000
    expose:
      - ${AUTHENTICATION_SERVICE_PORT}
    ports:
      - 7000:7000
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /app/config/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  common-data-service:
    image: dexlo/data1
    container_name: common-data-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
    environment:
      - DB_HOST=mysql-db
      - DB_PORT=3306
      - DB_USER=mysqluser
      - DB_PASS=mypass
      - DB_SCHEMA=ecommerce_app_database
      - ACTIVE_PROFILE=dev
      - PORT=9000
      - REDIS_PASSWORD=mypass
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REACT_CLIENT_URL=http://localhost:3000
    expose:
      - ${COMMON_DATA_SERVICE_PORT}
    ports:
      - 9000:9000
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /app/config/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  search-suggestion-service:
    image: dexlo/search1
    container_name: search-suggestion-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
      - common-data-service
      - authentication-service
      - payment-service
    environment:
      - ACTIVE_PROFILE=dev
      - PORT=10000
      - COMMON_DATA_SERVICE_URL=http://common-data-service:9000
    expose:
      - ${SEARCH_SUGGESTION_SERVICE_PORT}
    ports:
      - 10000:10000
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /app/config/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  payment-service:
    image: dexlo/payment1
    container_name: payment-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
    environment:
      - DB_HOST=mysql-db
      - DB_PORT=3306
      - DB_USER=mysqluser
      - DB_PASS=mypass
      - DB_SCHEMA=ecommerce_app_database
      - ACTIVE_PROFILE=dev
      - PORT=9050
    expose:
      - ${PAYMENT_SERVICE_PORT}
    ports:
      - 9050:9050
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /app/config/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  react-ui:
    image: dexlo/ui1
    container_name: react-service-container
    stdin_open: true
    restart: always
    expose:
      - ${REACT_APP_PORT}
    ports:
      - 3000:3000
    environment:
      - REACT_APP_STRIPE_PUBLISH_KEY=${REACT_APP_STRIPE_PUBLISH_KEY}
      - REACT_APP_COMMON_DATA_SERVICE_PORT=9000
      - REACT_APP_ENVIRONMENT=dev
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - mysql-db
      - redis-cache
    networks:
      - spring-cloud-microservices
    configs:
      - source: ecommerce_app_env
        target: /app/config/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - spring-cloud-microservices
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  
  grafana:
    image: grafana/grafana:latest
    ports:
      - "4000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - spring-cloud-microservices
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    restart: always
    network_mode: host
    pid: host
    volumes:
      - /:/host:ro,rslave
    command:
      - --path.rootfs=/host
    deploy:
      mode: global
  
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8081:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /var/lib/docker/:/var/lib/docker
    networks:
      - spring-cloud-microservices
    deploy:
      mode: global

volumes:
  grafana-storage:

networks:
  spring-cloud-microservices:
    driver: overlay
